#!groovy

properties([
  pipelineTriggers([cron('0 07 * * 1-5')]),

  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to fetch the keyvault secrets from'),
    string(name: 'URL_TO_TEST', defaultValue: 'https://paybubble.aat.platform.hmcts.net', description: 'The paybubble url you want to run these tests against'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The idam api url you want to run these tests against'),
    string(name: 'CCD_DATA_STORE_API_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal', description: 'The ccd data store api url you want to run these tests against'),
    string(name: 'S2S_RPE_SERVICE_AUTH_API_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', description: 'The s2s rpe service api url you want to run these tests against'),
    string(name: 'PAYMENT_API_URL', defaultValue: 'http://payment-api-aat.service.core-compute-aat.internal', description: 'The payment api url you want to run these tests against'),
    string(name: 'BULKSCANNING_API_URL', defaultValue: 'http://ccpay-bulkscanning-api-aat.service.core-compute-aat.internal', description: 'The bulkscanning api url you want to run these tests against')
  ])
])

@Library("Infrastructure")

def product = "ccpay"
def component = "bubble-frontend"
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  "ccpay-${params.ENVIRONMENT}": [
    secret('paybubble-s2s-secret', 'PAYBUBBLE_S2S_TOTP_SECRET'),
    secret('paybubble-idam-client-secret', 'IDAM_CLIENT_SECRET'),
    secret('launch-darkly-client-id', 'LD_CLIENT_ID'),
    secret('citizen-oauth-client-secret', 'OAUTH2_CLIENT_SECRET'),
    secret('cmc-service-secret', 'CMC_S2S_SERVICE_SECRET'),
    secret('postcode-address-lookup-id', 'POSTCODE_ADDRESS_LOOKUP_ID'),
    secret('probate-caseworker-username', 'PROBATE_CASE_WORKER_USER_NAME'),
    secret('probate-caseworker-password', 'PROBATE_CASE_WORKER_PASSWORD'),
    secret('divorce-caseworker-username', 'DIVORCE_CASE_WORKER_USER_NAME'),
    secret('divorce-caseworker-password', 'DIVORCE_CASE_WORKER_PASSWORD'),
    secret('refunds-requestor-caseworker-username', 'REFUNDS_REQUESTOR_USER_NAME'),
    secret('refunds-requestor-caseworker-password', 'REFUNDS_REQUESTOR_PASSWORD'),
    secret('refunds-approver-caseworker-username', 'REFUNDS_APPROVER_USER_NAME'),
    secret('refunds-approver-caseworker-password', 'REFUNDS_APPROVER_PASSWORD'),
    secret('fee-pay-divorce-client-id', 'DIVORCE_CLIENT_ID'),
    secret('fee-pay-divorce-client-secret', 'DIVORCE_CLIENT_SECRET'),
    secret('fee-pay-divorce-client-redirect-url', 'DIVORCE_CLIENT_REDIRECT_URI'),
    secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def vaultOverrides = [
  'preview': 'aat',
  'hmctsdemo': 'aat',

]

withNightlyPipeline("nodejs", product, component) {

  env.TEST_URL = params.URL_TO_TEST
  env.NIGHTLY_TEST= true
  env.IDAM_API_URL = params.IDAM_API_URL
  env.CCD_DATA_STORE_API_URL = params.CCD_DATA_STORE_API_URL
  env.S2S_RPE_SERVICE_AUTH_API_URL = params.S2S_RPE_SERVICE_AUTH_API_URL
  env.PAYMENT_API_URL = params.PAYMENT_API_URL
  env.BULKSCANNING_API_URL = params.BULKSCANNING_API_URL

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  // enableFortifyScan()
  enableCrossBrowserTest()
  enableFullFunctionalTest(180)
  enableMutationTest(150)
  afterAlways('checkout') {
    sh "yarn cache clean"
    echo 'ccpay-bubble checked out'
  }
  afterAlways('build') {
    sh 'yarn ng:build'
    sh 'chmod +x bin/run-mutation-tests.sh'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }
   afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }

  afterAlways('mutationTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/mutation-reports/**/*'
    publishHTML target: [
      reportDir            : "functional-output/mutation-reports/",
      reportFiles          : "index.html",
      reportName           : "PayBubble Mutation tests",
      alwaysLinkToLastBuild: true
    ]
  }

  before('fullFunctionalTest') {
    env.E2E_TESTS_FOR_ACCESSIBILITY = true
  }

  afterAlways('fullFunctionalTest') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output",
      reportFiles          : "parallel_chunk1_*/ccpay-bubble-e2e-result.html",
      reportName           : "PayBubble E2E functional tests result 1"
    ]
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output",
      reportFiles          : "parallel_chunk2_*/ccpay-bubble-e2e-result.html",
      reportName           : "PayBubble E2E functional tests result 2"
    ]
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output",
      reportFiles          : "parallel_chunk3_*/ccpay-bubble-e2e-result.html",
      reportName           : "PayBubble E2E functional tests result 3"
    ]
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output",
      reportFiles          : "parallel_chunk4_*/ccpay-bubble-e2e-result.html",
      reportName           : "PayBubble E2E functional tests result 4"
    ]
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    env.E2E_TESTS_FOR_ACCESSIBILITY = false
  }
}
