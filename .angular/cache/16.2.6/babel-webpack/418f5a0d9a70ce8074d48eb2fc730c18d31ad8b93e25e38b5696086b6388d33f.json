{"ast":null,"code":"import { PaymentModel } from 'src/app/models/PaymentModel';\nimport { PaybubbleHttpClient } from 'src/app/services/httpclient/paybubble.http.client';\nimport { FeeModel } from 'src/app/models/FeeModel';\nimport { RemissionModel } from 'src/app/models/RemissionModel';\nimport { feeTypes } from '../../../stubs/feeTypes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/httpclient/paybubble.http.client\";\nexport let AddFeeDetailService = /*#__PURE__*/(() => {\n  class AddFeeDetailService {\n    http;\n    _selectedFee;\n    _paymentModel;\n    _remissionModel;\n    _remissionRef = '';\n    constructor(http) {\n      this.http = http;\n    }\n    get paymentModel() {\n      return this._paymentModel;\n    }\n    set paymentModel(payModel) {\n      this._paymentModel = payModel;\n    }\n    get remissionModel() {\n      return this._remissionModel;\n    }\n    set remissionModel(remissionModel) {\n      this._remissionModel = remissionModel;\n    }\n    get selectedFee() {\n      return this._selectedFee;\n    }\n    set selectedFee(fee) {\n      this._selectedFee = fee;\n    }\n    get remissionRef() {\n      return this._remissionRef;\n    }\n    set remissionRef(remissionRef) {\n      this._remissionRef = remissionRef;\n    }\n    setNewPaymentModel(props) {\n      const paymentModel = new PaymentModel();\n      paymentModel.ccd_case_number = props.caseReference;\n      paymentModel.fees = [this.selectedFee];\n      paymentModel.service = props.serviceType;\n      paymentModel.amount = props.amountToPay === 0 || props.amountToPay ? props.amountToPay : this.selectedFee.calculated_amount;\n      this.paymentModel = paymentModel;\n    }\n    setNewRemissionModel(props) {\n      const remissionModel = new RemissionModel();\n      remissionModel.ccd_case_number = props.caseReference;\n      remissionModel.fee = this.selectedFee;\n      remissionModel.hwf_amount = props.amountToPay === 0 || props.amountToPay ? this.selectedFee.calculated_amount - props.amountToPay : null;\n      remissionModel.hwf_reference = props.helpWithFeesCode;\n      this.remissionModel = remissionModel;\n    }\n    buildFeeList() {\n      return feeTypes.map(data => {\n        const keys = Object.keys(data);\n        for (let i = 0; i < keys.length; i++) {\n          const feeModel = new FeeModel();\n          if (data.hasOwnProperty('code')) {\n            feeModel.code = data.code;\n          }\n          if (data.hasOwnProperty('fee_versions')) {\n            feeModel.calculated_amount = data.fee_versions[0].flat_amount.amount;\n            feeModel.display_amount = '£ ' + parseFloat(feeModel.calculated_amount + '').toFixed(2);\n            feeModel.description = data.fee_versions[0].description;\n            feeModel.version = `${data.fee_versions[0].version}`;\n            feeModel.memo_line = `${data.fee_versions[0].memo_line}`;\n            feeModel.natural_account_code = `${data.fee_versions[0].natural_account_code}`;\n            feeModel.jurisdiction1 = data.jurisdiction1.name;\n            feeModel.jurisdiction2 = data.jurisdiction2.name;\n          }\n          return feeModel;\n        }\n      });\n    }\n    postFullRemission() {\n      return this.http.post('/api/remission', RemissionModel.cleanModel(this._remissionModel)).toPromise();\n    }\n    postPartialRemission(paymentGroupRef, feeId) {\n      return this.http.post(`/api/payment-groups/${paymentGroupRef}/fees/${feeId}/remissions`, RemissionModel.cleanModel(this._remissionModel)).toPromise();\n    }\n    postPartialPayment() {\n      return this.http.post('/api/card-payments', PaymentModel.cleanModel(this._paymentModel)).toPromise();\n    }\n    postPaymentUrl(url) {\n      return this.http.post('/api/send-to-payhub-url', {\n        url\n      }).toPromise();\n    }\n    postPayment() {\n      return this.http.post('/api/send-to-payhub', PaymentModel.cleanModel(this._paymentModel)).toPromise();\n    }\n    static ɵfac = function AddFeeDetailService_Factory(t) {\n      return new (t || AddFeeDetailService)(i0.ɵɵinject(i1.PaybubbleHttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AddFeeDetailService,\n      factory: AddFeeDetailService.ɵfac\n    });\n  }\n  return AddFeeDetailService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}