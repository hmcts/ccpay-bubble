{"ast":null,"code":"var ManifestHandler = /** @class */function () {\n  function ManifestHandler(config) {\n    this.config = config;\n  }\n  ManifestHandler.prototype.getCategoryByCookieName = function (cookieName) {\n    var _a;\n    if (cookieName === this.config.userPreferences.cookieName) {\n      return {\n        name: '__internal',\n        optional: false,\n        matchBy: 'exact'\n      };\n    }\n    return (_a = this.getCategories().filter(function (category) {\n      return category.cookies.some(function (cookie) {\n        switch (category.matchBy) {\n          case 'exact':\n            return cookieName === cookie;\n          case 'includes':\n            return cookieName.includes(cookie);\n          case 'startsWith':\n          default:\n            return cookieName.startsWith(cookie);\n        }\n      });\n    })[0]) !== null && _a !== void 0 ? _a : {\n      name: ManifestHandler.DEFAULTS.UNDEFINED_CATEGORY_NAME,\n      optional: true\n    };\n  };\n  ManifestHandler.prototype.getCategories = function () {\n    return this.config.cookieManifest.map(function (category) {\n      var _a, _b;\n      return {\n        name: category.categoryName,\n        cookies: category.cookies,\n        optional: (_a = category.optional) !== null && _a !== void 0 ? _a : true,\n        matchBy: (_b = category.matchBy) !== null && _b !== void 0 ? _b : 'startsWith'\n      };\n    });\n  };\n  ManifestHandler.DEFAULTS = {\n    UNDEFINED_CATEGORY_NAME: 'un-categorized'\n  };\n  return ManifestHandler;\n}();\nvar CookieHandler = /** @class */function () {\n  function CookieHandler(config, manifestHandler, userPreferences) {\n    this.config = config;\n    this.manifestHandler = manifestHandler;\n    this.userPreferences = userPreferences;\n  }\n  CookieHandler.prototype.processCookies = function () {\n    if (this.config.additionalOptions.deleteUndefinedCookies) {\n      this._processUnCategorizedCookies();\n    }\n    this._processNonConsentedCookies();\n  };\n  CookieHandler.prototype._processNonConsentedCookies = function () {\n    var _this = this;\n    console.debug('Deleting non-consented cookies');\n    CookieHandler.getAllCookies().filter(function (cookie) {\n      var category = _this.manifestHandler.getCategoryByCookieName(cookie.name);\n      return category.name !== ManifestHandler.DEFAULTS.UNDEFINED_CATEGORY_NAME && category.optional && !_this.userPreferences.getPreferences()[category.name];\n    }).forEach(function (cookie) {\n      return CookieHandler.deleteCookie(cookie);\n    });\n  };\n  CookieHandler.prototype._processUnCategorizedCookies = function () {\n    var _this = this;\n    console.debug('Deleting non-categorized cookies');\n    CookieHandler.getAllCookies().filter(function (cookie) {\n      return _this.manifestHandler.getCategoryByCookieName(cookie.name).name === ManifestHandler.DEFAULTS.UNDEFINED_CATEGORY_NAME;\n    }).forEach(function (cookie) {\n      return CookieHandler.deleteCookie(cookie);\n    });\n  };\n  CookieHandler.getAllCookies = function () {\n    return decodeURIComponent(document.cookie).split(';').map(function (cookie) {\n      return cookie.trim();\n    }).filter(function (cookie) {\n      return cookie.length;\n    }).map(function (cookie) {\n      var cookieComponents = cookie.split(/=(.*)/).map(function (component) {\n        return component.trim();\n      });\n      return {\n        name: cookieComponents[0],\n        value: cookieComponents[1]\n      };\n    });\n  };\n  CookieHandler.getCookie = function (name) {\n    return CookieHandler.getAllCookies().filter(function (cookie) {\n      return cookie.name === name;\n    })[0];\n  };\n  CookieHandler.saveCookie = function (cookie, expiry, secure) {\n    var date = new Date();\n    date.setDate(date.getDate() + expiry);\n    var cookieString = cookie.name + '=';\n    cookieString += typeof cookie.value === 'object' ? JSON.stringify(cookie.value) : cookie.value;\n    cookieString += expiry ? ';expires=' + date.toUTCString() : '';\n    cookieString += secure ? ';secure' : '';\n    cookieString += ';path=/;';\n    document.cookie = cookieString;\n    console.debug(\"Saved '\".concat(cookie.name, \"' cookie\"));\n  };\n  CookieHandler.deleteCookie = function (cookie) {\n    console.debug('Deleting cookie: ' + cookie.name);\n    var hostname = window.location.hostname;\n    var upperDomain = hostname.substring(hostname.indexOf('.'));\n    var expires = new Date(-1).toUTCString();\n    [hostname, '.' + hostname, upperDomain, '.' + upperDomain].forEach(function (domain) {\n      document.cookie = cookie.name + '=;expires=' + expires + ';domain=' + domain + ';path=/;';\n    });\n  };\n  return CookieHandler;\n}();\nvar EventProcessor = /** @class */function () {\n  function EventProcessor() {}\n  /**\n  * Adds a callback/event listener to the specified event, which will be called when the event occurs.\n  *\n  * @param {string} eventName - The event to listen for.\n  * @param {Function} callback - The function to be called when the event is emitted.\n  * @return {EventToken} - Object which acts as unique identifier for added listener,\n  * to be passed to the `off` function to remove the added listener.\n  */\n  EventProcessor.on = function (eventName, callback) {\n    if (typeof eventName !== 'string') {\n      console.error('Event not provided');\n      return;\n    }\n    if (typeof callback !== 'function') {\n      console.error('No callback function provided');\n      return;\n    }\n    eventName = eventName.toLowerCase();\n    var token = Math.random().toString(16).slice(2);\n    if (!EventProcessor._handlerMap.has(eventName)) {\n      EventProcessor._handlerMap.set(eventName, new Map());\n    }\n    EventProcessor._handlerMap.get(eventName).set(token, callback);\n    return {\n      type: eventName,\n      token: token\n    };\n  };\n  /**\n  * Removes the listener identified by the eventToken parameter.\n  *\n  * @param {EventToken} eventToken - The EventToken of the callback/listener to remove.\n  */\n  EventProcessor.off = function (eventToken) {\n    var type;\n    var token;\n    try {\n      type = eventToken.type.toLowerCase();\n      token = eventToken.token;\n    } catch (e) {\n      console.error('Missing or malformed event token provided');\n      return;\n    }\n    if (EventProcessor._handlerMap.has(type)) {\n      EventProcessor._handlerMap.get(type).delete(token);\n    }\n  };\n  EventProcessor.emit = function (type, data) {\n    type = type.toLowerCase();\n    console.debug('Event fired: ' + type);\n    if (EventProcessor._handlerMap.has(type)) {\n      EventProcessor._handlerMap.get(type).forEach(function (value) {\n        return value(data);\n      });\n    }\n  };\n  EventProcessor._handlerMap = new Map();\n  return EventProcessor;\n}();\nvar UserPreferences = /** @class */function () {\n  function UserPreferences(config, manifestHandler) {\n    this.config = config;\n    this.manifestHandler = manifestHandler;\n  }\n  UserPreferences.prototype.processPreferences = function () {\n    var preferencesCookie = this.getPreferenceCookie();\n    if (preferencesCookie) {\n      this.setPreferences(this._loadPreferencesFromCookie());\n    } else {\n      this.setPreferences(this._loadPreferenceDefaults());\n    }\n  };\n  UserPreferences.prototype.getPreferences = function () {\n    if (!this.preferences) {\n      console.error('User preferences not loaded/set, call .processPreferences() first');\n      return {};\n    }\n    return this.preferences;\n  };\n  UserPreferences.prototype.setPreferences = function (preferences) {\n    console.debug('Setting preferences to: ' + JSON.stringify(preferences));\n    this.preferences = preferences;\n    EventProcessor.emit('UserPreferencesSet', preferences);\n  };\n  UserPreferences.prototype.getPreferenceCookie = function () {\n    return CookieHandler.getCookie(this.config.userPreferences.cookieName);\n  };\n  UserPreferences.prototype.savePreferencesToCookie = function () {\n    var cookieValue = {};\n    var preferences = this.getPreferences();\n    Object.keys(preferences).forEach(function (key) {\n      cookieValue[key] = preferences[key] ? 'on' : 'off';\n    });\n    var preferencesCookie = {\n      name: this.config.userPreferences.cookieName,\n      value: cookieValue\n    };\n    CookieHandler.saveCookie(preferencesCookie, this.config.userPreferences.cookieExpiry, this.config.userPreferences.cookieSecure);\n    EventProcessor.emit('UserPreferencesSaved', cookieValue);\n  };\n  UserPreferences.prototype._loadPreferencesFromCookie = function () {\n    var cookiePreferences;\n    var preferenceCookie = this.getPreferenceCookie();\n    try {\n      console.debug('Loading preferences from cookie');\n      cookiePreferences = JSON.parse(preferenceCookie.value);\n    } catch (e) {\n      console.error(\"Unable to parse user preference cookie \\\"\".concat(preferenceCookie.name, \"\\\" as JSON.\"));\n      CookieHandler.deleteCookie(preferenceCookie);\n      return this._loadPreferenceDefaults();\n    }\n    if (typeof cookiePreferences !== 'object') {\n      console.debug('User preferences cookie is malformed, deleting old user preferences cookie.');\n      CookieHandler.deleteCookie(preferenceCookie);\n      return this._loadPreferenceDefaults();\n    }\n    if (this.manifestHandler.getCategories().filter(function (category) {\n      return category.optional;\n    }).some(function (category) {\n      return !Object.keys(cookiePreferences).includes(category.name);\n    })) {\n      console.debug('User preferences cookie is missing categories, deleting old user preferences cookie.');\n      CookieHandler.deleteCookie(preferenceCookie);\n      return this._loadPreferenceDefaults();\n    }\n    var preferences = {};\n    Object.keys(cookiePreferences).forEach(function (key) {\n      preferences[key] = cookiePreferences[key] === 'on';\n    });\n    EventProcessor.emit('UserPreferencesLoaded', cookiePreferences);\n    return preferences;\n  };\n  UserPreferences.prototype._loadPreferenceDefaults = function () {\n    var _this = this;\n    console.debug('Loading preferences from defaults');\n    var preferences = {};\n    var cookiePreferences = {};\n    this.manifestHandler.getCategories().filter(function (category) {\n      var _a;\n      return (_a = category.optional) !== null && _a !== void 0 ? _a : true;\n    }).forEach(function (category) {\n      preferences[category.name] = _this.config.additionalOptions.defaultConsent;\n      cookiePreferences[category.name] = _this.config.additionalOptions.defaultConsent ? 'on' : 'off';\n    });\n    EventProcessor.emit('UserPreferencesLoaded', cookiePreferences);\n    return preferences;\n  };\n  return UserPreferences;\n}();\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nvar CookieBannerHandler = /** @class */function () {\n  function CookieBannerHandler(config, userPreferencesHandler, cookieHandler) {\n    this.config = config;\n    this.userPreferencesHandler = userPreferencesHandler;\n    this.cookieHandler = cookieHandler;\n  }\n  CookieBannerHandler.prototype.init = function () {\n    var _this = this;\n    if (this.userPreferencesHandler.getPreferenceCookie()) return;\n    if (document.readyState === 'loading') {\n      console.debug('DOM is not ready; adding event to bind to banner when ready.');\n      document.addEventListener('DOMContentLoaded', function () {\n        return _this.init();\n      });\n      return;\n    }\n    if (!this._getBannerNode()) return;\n    if (document.getElementsByClassName(this.config.preferencesForm.class)[0] && !this.config.cookieBanner.showWithPreferencesForm) return;\n    this._setupEventListeners();\n    this._getBannerNode().hidden = false;\n    EventProcessor.emit('CookieBannerInitialized');\n  };\n  CookieBannerHandler.prototype._setupEventListeners = function () {\n    var _this = this;\n    var actions = this.config.cookieBanner.actions || [];\n    actions.forEach(function (action) {\n      var e_1, _a;\n      try {\n        for (var _b = __values(_this._getBannerNode().querySelectorAll('.' + action.buttonClass)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var button = _c.value;\n          button.addEventListener('click', function (event) {\n            _this._clickEventHandler(event, action.name, action.confirmationClass, action.consent);\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  };\n  CookieBannerHandler.prototype._clickEventHandler = function (event, name, confirmationClass, consent) {\n    var e_2, _a;\n    event.preventDefault();\n    EventProcessor.emit('CookieBannerAction', name);\n    if (confirmationClass) {\n      try {\n        for (var _b = __values(this._getBannerNode().children), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          child.hidden = !child.classList.contains(confirmationClass);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      this._getBannerNode().hidden = true;\n    }\n    if (consent !== undefined) {\n      var preferences_1 = this.userPreferencesHandler.getPreferences();\n      // If set to TRUE (consent all) or FALSE (reject all)\n      if (typeof consent === 'boolean') {\n        Object.keys(preferences_1).forEach(function (category) {\n          preferences_1[category] = consent;\n        });\n      }\n      // If is array of categories\n      if (Array.isArray(consent)) {\n        consent.forEach(function (category) {\n          preferences_1[category] = true;\n        });\n      }\n      this._updatePreferences(preferences_1);\n    }\n  };\n  CookieBannerHandler.prototype._updatePreferences = function (preferences) {\n    this.userPreferencesHandler.setPreferences(preferences);\n    this.userPreferencesHandler.savePreferencesToCookie();\n    this.cookieHandler.processCookies();\n  };\n  CookieBannerHandler.prototype._getBannerNode = function () {\n    return document.querySelector('.' + this.config.cookieBanner.class);\n  };\n  return CookieBannerHandler;\n}();\nvar PreferencesFormHandler = /** @class */function () {\n  function PreferencesFormHandler(config, userPreferencesHandler, cookieHandler) {\n    this.config = config;\n    this.userPreferencesHandler = userPreferencesHandler;\n    this.cookieHandler = cookieHandler;\n  }\n  PreferencesFormHandler.prototype.init = function () {\n    var _this = this;\n    if (document.readyState === 'loading') {\n      console.debug('DOM is not ready; adding event to bind to preference form when ready.');\n      document.addEventListener('DOMContentLoaded', function () {\n        return _this.init();\n      });\n      return;\n    }\n    if (!this._getPreferencesForm()) {\n      return;\n    }\n    this._setupEventListeners();\n    this._configureFormRadios();\n    EventProcessor.emit('PreferenceFormInitialized');\n  };\n  PreferencesFormHandler.prototype._getPreferencesForm = function () {\n    return document.getElementsByClassName(this.config.preferencesForm.class)[0];\n  };\n  PreferencesFormHandler.prototype._setupEventListeners = function () {\n    var _this = this;\n    this._getPreferencesForm().addEventListener('submit', function (event) {\n      return _this._submitEventHandler(event);\n    });\n  };\n  PreferencesFormHandler.prototype._submitEventHandler = function (event) {\n    var e_1, _a;\n    event.preventDefault();\n    var preferences = {};\n    try {\n      for (var _b = __values(event.target.querySelectorAll('input[type=\"radio\"]:checked')), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var radio = _c.value;\n        var name_1 = radio.getAttribute('name');\n        var value = radio.getAttribute('value');\n        preferences[name_1] = value === 'on';\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    EventProcessor.emit('PreferenceFormSubmitted', preferences);\n    this._updatePreferences(preferences);\n  };\n  PreferencesFormHandler.prototype._updatePreferences = function (preferences) {\n    this.userPreferencesHandler.setPreferences(preferences);\n    this.userPreferencesHandler.savePreferencesToCookie();\n    this.cookieHandler.processCookies();\n  };\n  PreferencesFormHandler.prototype._configureFormRadios = function () {\n    var preferences = this.userPreferencesHandler.getPreferences();\n    for (var key in preferences) {\n      var checkboxValue = preferences[key] ? 'on' : 'off';\n      var checkbox = this._getPreferencesForm().querySelector(\"input[name=\".concat(key, \"][value=\").concat(checkboxValue, \"]\"));\n      if (checkbox) {\n        checkbox.checked = true;\n      }\n    }\n  };\n  return PreferencesFormHandler;\n}();\nvar isString = function (property) {\n  return typeof property === 'string' && property.trim() !== '';\n};\nvar isBoolean = function (property) {\n  return typeof property === 'boolean';\n};\nvar isNumber = function (property) {\n  return typeof property === 'number' && !isNaN(property);\n};\nvar isUndefined = function (property) {\n  return property === undefined;\n};\nvar isArray = function (property) {\n  return Array.isArray(property) && property.length;\n};\nvar isArrayOfType = function (property, type) {\n  return isArray(property) && property.every(function (value) {\n    return type(value);\n  });\n};\nvar ConfigHandler = /** @class */function () {\n  function ConfigHandler() {\n    this.configTypes = {\n      userPreferences: {\n        cookieName: isString,\n        cookieExpiry: isNumber,\n        cookieSecure: isBoolean\n      },\n      preferencesForm: {\n        class: isString\n      },\n      cookieBanner: {\n        class: isString,\n        showWithPreferencesForm: isBoolean,\n        actions: {\n          name: isString,\n          buttonClass: isString,\n          confirmationClass: {\n            OR: [isUndefined, isString]\n          },\n          consent: {\n            OR: [isUndefined, isBoolean, function (property) {\n              return isArrayOfType(property, isString);\n            }]\n          }\n        }\n      },\n      additionalOptions: {\n        disableCookieBanner: isBoolean,\n        disableCookiePreferencesForm: isBoolean,\n        deleteUndefinedCookies: isBoolean,\n        defaultConsent: isBoolean\n      },\n      cookieManifest: {\n        categoryName: isString,\n        optional: {\n          OR: [isUndefined, isBoolean]\n        },\n        matchBy: {\n          OR: [isUndefined, function (property) {\n            return isString(property) && ['exact', 'startsWith', 'includes'].indexOf(property) !== -1;\n          }]\n        },\n        cookies: function (property) {\n          return isArrayOfType(property, isString);\n        }\n      }\n    };\n  }\n  ConfigHandler.prototype.typeOfTester = function (value, testers) {\n    if (typeof testers === 'function') return testers(value);\n    if (testers.AND) {\n      return testers.AND.every(function (testFunction) {\n        return testFunction(value);\n      });\n    } else {\n      return testers.OR.some(function (testFunction) {\n        return testFunction(value);\n      });\n    }\n  };\n  ConfigHandler.prototype.validateUserPreferencesConfig = function (configuration) {\n    for (var key in this.configTypes.userPreferences) {\n      if (!this.typeOfTester(configuration[key], this.configTypes.userPreferences[key])) throw new ConfigError(key);\n    }\n  };\n  ConfigHandler.prototype.validateAdditionalOptionsConfig = function (configuration) {\n    for (var key in this.configTypes.additionalOptions) {\n      if (!this.typeOfTester(configuration[key], this.configTypes.additionalOptions[key])) throw new ConfigError(key);\n    }\n  };\n  ConfigHandler.prototype.validatePreferencesFormConfig = function (configuration) {\n    for (var key in this.configTypes.preferencesForm) {\n      if (!this.typeOfTester(configuration[key], this.configTypes.preferencesForm[key])) throw new ConfigError(key);\n    }\n  };\n  ConfigHandler.prototype.validateCookieBannerConfig = function (configuration) {\n    var _this = this;\n    var _a = this.configTypes.cookieBanner,\n      actions = _a.actions,\n      options = __rest(_a, [\"actions\"]);\n    for (var key in options) {\n      if (!this.typeOfTester(configuration[key], this.configTypes.cookieBanner[key])) throw new ConfigError(key);\n    }\n    configuration.actions.forEach(function (action) {\n      for (var key in actions) {\n        if (!_this.typeOfTester(action[key], _this.configTypes.cookieBanner.actions[key])) throw new ConfigError(key);\n      }\n    });\n  };\n  ConfigHandler.prototype.validateCookieManifestConfig = function (configuration) {\n    var _this = this;\n    configuration.forEach(function (cookieCategory) {\n      for (var key in _this.configTypes.cookieManifest) {\n        if (!_this.typeOfTester(cookieCategory[key], _this.configTypes.cookieManifest[key])) throw new ConfigError(key);\n      }\n    });\n  };\n  ConfigHandler.prototype.validateConfig = function (configuration) {\n    this.validateUserPreferencesConfig(configuration.userPreferences);\n    this.validateAdditionalOptionsConfig(configuration.additionalOptions);\n    this.validatePreferencesFormConfig(configuration.preferencesForm);\n    this.validateCookieBannerConfig(configuration.cookieBanner);\n    this.validateCookieManifestConfig(configuration.cookieManifest);\n  };\n  ConfigHandler.prototype.mergeConfigurations = function (providedConfig) {\n    var _a;\n    var finalConfig = __assign({}, ConfigHandler.defaultConfig);\n    if (Object.keys(providedConfig).length) {\n      finalConfig.userPreferences = __assign(__assign({}, ConfigHandler.defaultConfig.userPreferences), providedConfig.userPreferences);\n      finalConfig.additionalOptions = __assign(__assign({}, ConfigHandler.defaultConfig.additionalOptions), providedConfig.additionalOptions);\n      finalConfig.preferencesForm = __assign(__assign({}, ConfigHandler.defaultConfig.preferencesForm), providedConfig.preferencesForm);\n      finalConfig.cookieBanner = __assign(__assign({}, ConfigHandler.defaultConfig.cookieBanner), providedConfig.cookieBanner);\n      finalConfig.cookieManifest = (_a = providedConfig.cookieManifest) !== null && _a !== void 0 ? _a : ConfigHandler.defaultConfig.cookieManifest;\n      this.validateConfig(finalConfig);\n    }\n    return finalConfig;\n  };\n  ConfigHandler.defaultConfig = {\n    userPreferences: {\n      cookieName: 'cookie-preferences',\n      cookieExpiry: 365,\n      cookieSecure: false\n    },\n    preferencesForm: {\n      class: 'cookie-preferences-form'\n    },\n    cookieBanner: {\n      class: 'cookie-banner',\n      showWithPreferencesForm: false,\n      actions: [{\n        name: 'accept',\n        buttonClass: 'cookie-banner-accept-button',\n        confirmationClass: 'cookie-banner-accept-message',\n        consent: true\n      }, {\n        name: 'reject',\n        buttonClass: 'cookie-banner-reject-button',\n        confirmationClass: 'cookie-banner-reject-message',\n        consent: false\n      }, {\n        name: 'hide',\n        buttonClass: 'cookie-banner-hide-button'\n      }]\n    },\n    cookieManifest: [],\n    additionalOptions: {\n      disableCookieBanner: false,\n      disableCookiePreferencesForm: false,\n      deleteUndefinedCookies: true,\n      defaultConsent: false\n    }\n  };\n  return ConfigHandler;\n}();\nvar ConfigError = /** @class */function (_super) {\n  __extends(ConfigError, _super);\n  function ConfigError(property) {\n    var _this = _super.call(this, \"Configuration property '\".concat(property, \"' is malformed, missing or has an unexpected value.\")) || this;\n    _this.name = 'ConfigError';\n    return _this;\n  }\n  return ConfigError;\n}(Error);\n\n/**\n * Initializes the @hmcts-cookie/manager library using the provided config.\n *\n * @param {CookieManagerConfig} providedConfig - Config for the library to use.\n */\nfunction init(providedConfig) {\n  console.debug('CookieManager initializing...');\n  var config;\n  try {\n    config = new ConfigHandler().mergeConfigurations(providedConfig);\n  } catch (e) {\n    console.error(e);\n    console.error('Invalid config supplied to CookieManager, disabling...');\n    return;\n  }\n  var manifestHandler = new ManifestHandler(config);\n  var userPreferences = new UserPreferences(config, manifestHandler);\n  var cookieHandler = new CookieHandler(config, manifestHandler, userPreferences);\n  userPreferences.processPreferences();\n  if (!config.additionalOptions.disableCookieBanner) {\n    new CookieBannerHandler(config, userPreferences, cookieHandler).init();\n  }\n  if (!config.additionalOptions.disableCookiePreferencesForm) {\n    new PreferencesFormHandler(config, userPreferences, cookieHandler).init();\n  }\n  EventProcessor.emit('CookieManagerLoaded');\n  cookieHandler.processCookies();\n}\nvar on = EventProcessor.on;\nvar off = EventProcessor.off;\nvar cookieManager = {\n  on: on,\n  off: off,\n  init: init\n};\nexport { cookieManager as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}